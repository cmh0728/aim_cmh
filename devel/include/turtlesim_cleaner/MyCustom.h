// Generated by gencpp from file turtlesim_cleaner/MyCustom.msg
// DO NOT EDIT!


#ifndef TURTLESIM_CLEANER_MESSAGE_MYCUSTOM_H
#define TURTLESIM_CLEANER_MESSAGE_MYCUSTOM_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace turtlesim_cleaner
{
template <class ContainerAllocator>
struct MyCustom_
{
  typedef MyCustom_<ContainerAllocator> Type;

  MyCustom_()
    : x(0.0)
    , y(0.0)
    , arr()  {
    }
  MyCustom_(const ContainerAllocator& _alloc)
    : x(0.0)
    , y(0.0)
    , arr(_alloc)  {
  (void)_alloc;
    }



   typedef double _x_type;
  _x_type x;

   typedef double _y_type;
  _y_type y;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _arr_type;
  _arr_type arr;





  typedef boost::shared_ptr< ::turtlesim_cleaner::MyCustom_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::turtlesim_cleaner::MyCustom_<ContainerAllocator> const> ConstPtr;

}; // struct MyCustom_

typedef ::turtlesim_cleaner::MyCustom_<std::allocator<void> > MyCustom;

typedef boost::shared_ptr< ::turtlesim_cleaner::MyCustom > MyCustomPtr;
typedef boost::shared_ptr< ::turtlesim_cleaner::MyCustom const> MyCustomConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::turtlesim_cleaner::MyCustom_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::turtlesim_cleaner::MyCustom_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::turtlesim_cleaner::MyCustom_<ContainerAllocator1> & lhs, const ::turtlesim_cleaner::MyCustom_<ContainerAllocator2> & rhs)
{
  return lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.arr == rhs.arr;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::turtlesim_cleaner::MyCustom_<ContainerAllocator1> & lhs, const ::turtlesim_cleaner::MyCustom_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace turtlesim_cleaner

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::turtlesim_cleaner::MyCustom_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::turtlesim_cleaner::MyCustom_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::turtlesim_cleaner::MyCustom_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::turtlesim_cleaner::MyCustom_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::turtlesim_cleaner::MyCustom_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::turtlesim_cleaner::MyCustom_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::turtlesim_cleaner::MyCustom_<ContainerAllocator> >
{
  static const char* value()
  {
    return "957a84dc144cfbccfcf214c35dd36d2d";
  }

  static const char* value(const ::turtlesim_cleaner::MyCustom_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x957a84dc144cfbccULL;
  static const uint64_t static_value2 = 0xfcf214c35dd36d2dULL;
};

template<class ContainerAllocator>
struct DataType< ::turtlesim_cleaner::MyCustom_<ContainerAllocator> >
{
  static const char* value()
  {
    return "turtlesim_cleaner/MyCustom";
  }

  static const char* value(const ::turtlesim_cleaner::MyCustom_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::turtlesim_cleaner::MyCustom_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 x\n"
"float64 y\n"
"float64[] arr\n"
;
  }

  static const char* value(const ::turtlesim_cleaner::MyCustom_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::turtlesim_cleaner::MyCustom_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.arr);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MyCustom_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::turtlesim_cleaner::MyCustom_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::turtlesim_cleaner::MyCustom_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "arr[]" << std::endl;
    for (size_t i = 0; i < v.arr.size(); ++i)
    {
      s << indent << "  arr[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.arr[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // TURTLESIM_CLEANER_MESSAGE_MYCUSTOM_H
